{"ast":null,"code":"var _jsxFileName = \"E:\\\\GA2\\\\GAA3\\\\frontend\\\\src\\\\components\\\\AnalyticsChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnalyticsChart = ({\n  authToken\n}) => {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchAnalyticsData = async () => {\n      try {\n        const res = await axios.get('http://localhost:5000/analytics', {\n          headers: {\n            Authorization: `Bearer ${authToken}`\n          }\n        });\n        if (res.status === 200) {\n          const formattedData = formatResponseForChart(res.data);\n          setChartData(formattedData);\n        }\n      } catch (err) {\n        console.error('Error fetching analytics data:', err);\n        setError('Error fetching analytics data');\n      }\n    };\n    if (authToken) {\n      fetchAnalyticsData();\n    }\n  }, [authToken]);\n  const formatResponseForChart = response => {\n    const {\n      rows\n    } = response;\n    const formattedData = rows.map(row => ({\n      date: new Date(),\n      // You can modify this if the API gives actual dates.\n      activeUsers: row.metricValues[0].value // Extract the active users count.\n    }));\n    return {\n      labels: formattedData.map(data => data.date.toLocaleDateString()),\n      // Create labels from date.\n      datasets: [{\n        label: 'Active Users',\n        data: formattedData.map(data => data.activeUsers),\n        // Populate active users.\n        borderColor: 'rgba(75, 192, 192, 1)',\n        backgroundColor: 'rgba(75, 192, 192, 0.2)',\n        fill: false,\n        // You can change this to 'true' if you want a filled line chart.\n        tension: 0.1 // This will make the line smoother (optional).\n      }]\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Active Users Analytics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this), chartData ? /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading analytics data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(AnalyticsChart, \"IFJj7nSJvcbvx2I/MLqJX73o+2w=\");\n_c = AnalyticsChart;\nexport default AnalyticsChart;\nvar _c;\n$RefreshReg$(_c, \"AnalyticsChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","axios","jsxDEV","_jsxDEV","AnalyticsChart","authToken","_s","chartData","setChartData","error","setError","fetchAnalyticsData","res","get","headers","Authorization","status","formattedData","formatResponseForChart","data","err","console","response","rows","map","row","date","Date","activeUsers","metricValues","value","labels","toLocaleDateString","datasets","label","borderColor","backgroundColor","fill","tension","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/GA2/GAA3/frontend/src/components/AnalyticsChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\n\r\nconst AnalyticsChart = ({ authToken }) => {\r\n  const [chartData, setChartData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchAnalyticsData = async () => {\r\n      try {\r\n        const res = await axios.get('http://localhost:5000/analytics', {\r\n          headers: {\r\n            Authorization: `Bearer ${authToken}`,\r\n          },\r\n        });\r\n\r\n        if (res.status === 200) {\r\n          const formattedData = formatResponseForChart(res.data);\r\n          setChartData(formattedData);\r\n        }\r\n      } catch (err) {\r\n        console.error('Error fetching analytics data:', err);\r\n        setError('Error fetching analytics data');\r\n      }\r\n    };\r\n\r\n    if (authToken) {\r\n      fetchAnalyticsData();\r\n    }\r\n  }, [authToken]);\r\n\r\n  const formatResponseForChart = (response) => {\r\n    const { rows } = response;\r\n\r\n    const formattedData = rows.map((row) => ({\r\n      date: new Date(), // You can modify this if the API gives actual dates.\r\n      activeUsers: row.metricValues[0].value, // Extract the active users count.\r\n    }));\r\n\r\n    return {\r\n      labels: formattedData.map((data) => data.date.toLocaleDateString()), // Create labels from date.\r\n      datasets: [\r\n        {\r\n          label: 'Active Users',\r\n          data: formattedData.map((data) => data.activeUsers), // Populate active users.\r\n          borderColor: 'rgba(75, 192, 192, 1)',\r\n          backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n          fill: false, // You can change this to 'true' if you want a filled line chart.\r\n          tension: 0.1, // This will make the line smoother (optional).\r\n        },\r\n      ],\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Active Users Analytics</h2>\r\n      {error && <p>{error}</p>}\r\n      {chartData ? (\r\n        <Line data={chartData} />\r\n      ) : (\r\n        <p>Loading analytics data...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnalyticsChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}